'''
Highly divisible triangular number

Problem 12
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''

'''
some background reading on the purely mathematical solution: The Tao Function. This will lead to an interesting alternative approach!
    https://en.wikipedia.org/wiki/Divisor_function
    https://mathschallenge.net/library/number/number_of_divisors
    https://primes.utm.edu/glossary/page.php?sort=Tau
'''
import time

def factorize(num):
    factors = []
    ## BRUTE FORCE WITH 50% REDUCED SWEEP LENGTH
    # for i in range(1, num//2 + 1):
    #     if num%i == 0:
    #         factors.append(i)
    # factors.append(num)
    ##
    
    ## PARTIAL BRUTE FORCE, SWEEP LENGTH REDUCED TO SQRT(NUM)
    for i in range(1, int(num**0.5) + 1):
        if num % i == 0:
            if i == num//i:
                factors.append(i)
            else:
                factors.append(i)
                factors.append(num//i)
    return factors

def highlyDivisibleTriangleNums(n):
    TNum = 0
    i = 0
    divisors = []
    while len(divisors) < n:
        i += 1
        TNum += i
        divisors = factorize(TNum)
    return TNum, len(divisors)



n = 500
t0 = time.time()
result = highlyDivisibleTriangleNums(n)
t1 = time.time()
answer = "\n-------------------\nTriangle Number: {}\nnum of divisors: {}\nexecuted in {} seconds.\n-------------------\n"
print(answer.format(result[0],result[1],t1-t0))


